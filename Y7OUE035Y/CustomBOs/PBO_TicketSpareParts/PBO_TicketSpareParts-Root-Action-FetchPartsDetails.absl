/*
	Add your SAP Business ByDesign scripting language implementation for:
		Business Object: PBO_TicketSpareParts
		Node: Root
		Action: FetchPartsDetails 
		
	Note: 
	  - To access the elements of the business object node, 
	    use path expressions, for example, this.<element name>. 
	  - To use code completion, press CTRL+J. 
	  - This script file is mass-enabled, i.e. the keyword "this" 
	    refers to a collection of node instances.
	   
*/
//****************************************************************************************************************************//
//Change Request ID: SDK31.0
//Author: Arya Manmadan (SDK3)
//Description: Code clearance to improve system performance
//Change Date: 02 Dec 2019
//****************************************************************************************************************************//


import ABSL;
import AP.CRM.Global;

foreach (var inst in this)
{
	//Retrieve Ticket Instance
	if (inst.IsSet())
	{
		if (!inst.TicketID.IsInitial())
		{
			var TicketInstance = ServiceRequest.Retrieve(inst.TicketID);
			if (TicketInstance.IsSet())
			{
				inst.toTicket = TicketInstance;
				//added for SDK31.0
				var ToTicket_Inst = inst.toTicket;
				var ToTicket_Inst_Item;
				var ToTicket_Inst_TxtColl;
			
				if (ToTicket_Inst.IsSet())
				{
					ToTicket_Inst_Item = ToTicket_Inst.Item;
					ToTicket_Inst_TxtColl = ToTicket_Inst.TextCollection;
				}
			
				//added for SDK31.0
				//if(inst.toTicket.IsSet())
				if (ToTicket_Inst.IsSet())//commented above and added for SDK31.0
				{
					//Retrieve Ticket Item Instance
					//if(inst.toTicket.Item.Count() > 0)
					if (ToTicket_Inst_Item.Count() > 0)//commented above and added for SDK31.0
					{
						//Retrieve Ticket Item with Processing Code "Central WH to Technician", "Local WH Reservation", "Technician Van Stock Reservation" and in Reserved Status
						//var TicketItemSpecific = inst.toTicket.Item.Where(n=>(n.UserServiceTransactionProcessingTypeCode == "ZCW1" || n.UserServiceTransactionProcessingTypeCode == "ZLW1" || n.UserServiceTransactionProcessingTypeCode == "ZTE1") && n.Status.ExternalFollowUpProcessingReleaseStatusCode == "3");
						var TicketItemSpecific = ToTicket_Inst_Item.Where(n => (n.UserServiceTransactionProcessingTypeCode == "ZCW1" || n.UserServiceTransactionProcessingTypeCode == "ZLW1" || n.UserServiceTransactionProcessingTypeCode == "ZTE1") && n.Status.ExternalFollowUpProcessingReleaseStatusCode == "3");//commented above and added for SDK31.0
						if (TicketItemSpecific.Count() > 0)
						{ 
							foreach (var items in TicketItemSpecific)
							{
								var SpareParts;
								//added for SDK31.0
								var PartNumber_Node = items.ItemProduct;
								var Item_TotalValues_Node = items.ItemTotalValues;
								//added for SDK31.0
								// When Parent-Child line item is available and part is consumed but not released
								//var TicketItemMatchDescr =  inst.toTicket.Item.Where(i=>(i.LX_TKT_PAR == items.ID.RemoveLeadingZeros() && i.UserServiceTransactionProcessingTypeCode == "SRP1" ) && i.Status.ExternalFollowUpProcessingReleaseStatusCode != "3");
								var TicketItemMatchDescr = ToTicket_Inst_Item.Where(i => (i.LX_TKT_PAR == items.ID.RemoveLeadingZeros() && i.UserServiceTransactionProcessingTypeCode == "SRP1") && i.Status.ExternalFollowUpProcessingReleaseStatusCode != "3"); //commented above and added for SDK31.0
								if (TicketItemMatchDescr.Count() > 0)	 
								{	
									//Create SpareParts node instance to show Parts name, Parts number and Quantity in Tickets Quick View screen	
									////added for SDK31.0
									var Var_SpareParts : elementsof PBO_TicketSpareParts.SpareParts;
									Var_SpareParts.PartsName = items.Description.content;
									if (PartNumber_Node.IsSet())
									{
										Var_SpareParts.PartsNumber = PartNumber_Node.ProductKey.ProductID.content; 
									}
									Var_SpareParts.ProcessingType = items.UserServiceTransactionProcessingTypeCode.GetDescription();
									if (Item_TotalValues_Node.IsSet())
									{
										Var_SpareParts.PlannedQuantity.content = Item_TotalValues_Node.RequestedQuantity.content;
									}
									SpareParts = inst.SpareParts.Create(Var_SpareParts);
									////added for SDK31.0
									//SpareParts							= inst.SpareParts.Create();
									//SpareParts.PartsName				= items.Description.content;
									//SpareParts.PartsNumber				= items.ItemProduct.ProductKey.ProductID.content;
									//SpareParts.ProcessingType			= items.UserServiceTransactionProcessingTypeCode.GetDescription();
									//SpareParts.PlannedQuantity.content	= items.ItemTotalValues.RequestedQuantity.content;								
								}

								// When Parent-Child line item is not available and part is released but not consumed
								//var ItemCount = inst.toTicket.Item.Where(i=>i.Description.content == items.Description.content);						
								var ItemCount = ToTicket_Inst_Item.Where(i => i.Description.content == items.Description.content);//commented above and added for SDK31.0	
								if (ItemCount.Count() == 1)
								{
									//Create SpareParts node instance to show Parts name, Parts number and Quantity in Tickets Quick View screen	
									//added for SDK31.0
									var Var_SpareParts : elementsof PBO_TicketSpareParts.SpareParts;
									Var_SpareParts.PartsName = items.Description.content;
									if (PartNumber_Node.IsSet())
									{
										Var_SpareParts.PartsNumber = PartNumber_Node.ProductKey.ProductID.content;
									}
									Var_SpareParts.ProcessingType = items.UserServiceTransactionProcessingTypeCode.GetDescription();
									if (Item_TotalValues_Node.IsSet())
									{
										Var_SpareParts.PlannedQuantity.content = Item_TotalValues_Node.RequestedQuantity.content;
									}
									SpareParts = inst.SpareParts.Create(Var_SpareParts);
									//added for SDK31.0
									//SpareParts							= inst.SpareParts.Create();
									//SpareParts.PartsName				= items.Description.content;
									//SpareParts.PartsNumber				= items.ItemProduct.ProductKey.ProductID.content;
									//SpareParts.ProcessingType			= items.UserServiceTransactionProcessingTypeCode.GetDescription();
									//SpareParts.PlannedQuantity.content	= items.ItemTotalValues.RequestedQuantity.content;	
								}
							}
						}
					}
					//Retrieve Work Description
					//if(inst.toTicket.TextCollection.IsSet())
					if (ToTicket_Inst_TxtColl.IsSet())//commented above and added for SDK31.0	
					{
						//var TicketTextCollection		= inst.toTicket.TextCollection;
						var TicketTextCollection = ToTicket_Inst_TxtColl.Text;//commented above and added for SDK31.0
						if (TicketTextCollection.Count() > 0)//added for SDK31.0
						{
							//if (TicketTextCollection.TextExistsIndicator)
							//{
							var TicketWorkDescription = TicketTextCollection.Where(n => n.TypeCode.content == "10022").GetFirst(); //TypeCode 10022 - Service Response Reports
							if (TicketWorkDescription.IsSet())
							{
								inst.WorkDescription.content = TicketWorkDescription.TextContent.Text.content;
							}
							//}
						}
					}
				}
			}
		}
	}
}


